// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"terraform/internal/sdk"
	"terraform/internal/sdk/pkg/models/operations"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"terraform/internal/validators"
) // Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &UserResource{}
var _ resource.ResourceWithImportState = &UserResource{}

func NewUserResource() resource.Resource {
	return &UserResource{}
}

// UserResource defines the resource implementation.
type UserResource struct {
	client *sdk.SDK
}

// UserResourceModel describes the resource data model.
type UserResourceModel struct {
	CreatedAt      types.String `tfsdk:"created_at"`
	Email          types.String `tfsdk:"email"`
	ExpireAt       types.String `tfsdk:"expire_at"`
	ID             types.String `tfsdk:"id"`
	JoinedAt       types.String `tfsdk:"joined_at"`
	Name           types.String `tfsdk:"name"`
	OrganizationID types.String `tfsdk:"organization_id"`
	Role           types.String `tfsdk:"role"`
	Status         types.Number `tfsdk:"status"`
	UserID         types.String `tfsdk:"user_id"`
}

func (r *UserResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_user"
}

func (r *UserResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "User Resource",

		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `Invitation creation timestamp. ISO-8601.`,
			},
			"email": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required:    true,
				Description: `Email of the invited user. Only a user with this email can join using the invitation. The email is stored in a lowercase form.`,
			},
			"expire_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `Timestamp the invitation expires. ISO-8601.`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `Unique invitation ID.`,
			},
			"joined_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `Timestamp the member joined the organization. ISO-8601.`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `Name of the member as set a personal user profile.`,
			},
			"organization_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required:    true,
				Description: `ID of the organization to invite a user to.`,
			},
			"role": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"admin",
						"developer",
					),
				},
				MarkdownDescription: `must be one of [admin, developer]` + "\n" +
					`Role of the member in the organization.`,
			},
			"status": schema.NumberAttribute{
				Computed:    true,
				Description: `HTTP status code.`,
			},
			"user_id": schema.StringAttribute{
				Computed:    true,
				Description: `Unique user ID. If a user is a member in multiple organizations this ID will stay the same.`,
			},
		},
	}
}

func (r *UserResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *UserResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *UserResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	invitationPostRequest := data.ToCreateSDKType()
	organizationID := data.OrganizationID.ValueString()
	request := operations.PostV1OrganizationsOrganizationIDInvitationsRequest{
		InvitationPostRequest: invitationPostRequest,
		OrganizationID:        organizationID,
	}
	res, err := r.client.PostV1OrganizationsOrganizationIDInvitations(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	organizationId1 := data.OrganizationID.ValueString()
	userID := data.UserID.ValueString()
	getRequest := operations.GetV1OrganizationsOrganizationIDMembersUserIDRequest{
		OrganizationID: organizationId1,
		UserID:         userID,
	}
	getResponse, err := r.client.GetV1OrganizationsOrganizationIDMembersUserID(ctx, getRequest)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if getResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", getResponse))
		return
	}
	if getResponse.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", getResponse.StatusCode), debugResponse(getResponse.RawResponse))
		return
	}
	if getResponse.GetV1OrganizationsOrganizationIDMembersUserID200ApplicationJSONObject.Result == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(getResponse.GetV1OrganizationsOrganizationIDMembersUserID200ApplicationJSONObject.Result)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *UserResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *UserResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	organizationID := data.OrganizationID.ValueString()
	userID := data.UserID.ValueString()
	request := operations.GetV1OrganizationsOrganizationIDMembersUserIDRequest{
		OrganizationID: organizationID,
		UserID:         userID,
	}
	res, err := r.client.GetV1OrganizationsOrganizationIDMembersUserID(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.GetV1OrganizationsOrganizationIDMembersUserID200ApplicationJSONObject.Result == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.GetV1OrganizationsOrganizationIDMembersUserID200ApplicationJSONObject.Result)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *UserResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *UserResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	memberPatchRequest := data.ToUpdateSDKType()
	organizationID := data.OrganizationID.ValueString()
	userID := data.UserID.ValueString()
	request := operations.PatchV1OrganizationsOrganizationIDMembersUserIDRequest{
		MemberPatchRequest: memberPatchRequest,
		OrganizationID:     organizationID,
		UserID:             userID,
	}
	res, err := r.client.PatchV1OrganizationsOrganizationIDMembersUserID(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.PatchV1OrganizationsOrganizationIDMembersUserID200ApplicationJSONObject.Result == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromUpdateResponse(res.PatchV1OrganizationsOrganizationIDMembersUserID200ApplicationJSONObject.Result)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *UserResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *UserResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	organizationID := data.OrganizationID.ValueString()
	userID := data.UserID.ValueString()
	request := operations.DeleteV1OrganizationsOrganizationIDMembersUserIDRequest{
		OrganizationID: organizationID,
		UserID:         userID,
	}
	res, err := r.client.DeleteV1OrganizationsOrganizationIDMembersUserID(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if fmt.Sprintf("%v", res.StatusCode)[0] != '2' {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *UserResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.AddError("Not Implemented", "No available import state operation is available for resource user.")
}
