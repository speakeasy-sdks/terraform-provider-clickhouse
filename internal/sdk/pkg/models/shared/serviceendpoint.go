// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ServiceEndpointProtocol - Endpoint protocol: 'https', 'nativesecure'.
type ServiceEndpointProtocol string

const (
	ServiceEndpointProtocolHTTPS        ServiceEndpointProtocol = "https"
	ServiceEndpointProtocolNativesecure ServiceEndpointProtocol = "nativesecure"
)

func (e ServiceEndpointProtocol) ToPointer() *ServiceEndpointProtocol {
	return &e
}

func (e *ServiceEndpointProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "https":
		fallthrough
	case "nativesecure":
		*e = ServiceEndpointProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceEndpointProtocol: %v", v)
	}
}

type ServiceEndpoint struct {
	// Service host name
	Host *string `json:"host,omitempty"`
	// Numeric port
	Port *float64 `json:"port,omitempty"`
	// Endpoint protocol: 'https', 'nativesecure'.
	Protocol *ServiceEndpointProtocol `json:"protocol,omitempty"`
}
