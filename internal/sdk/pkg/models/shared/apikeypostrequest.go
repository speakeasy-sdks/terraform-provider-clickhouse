// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type APIKeyPostRequestRoles string

const (
	APIKeyPostRequestRolesAdmin     APIKeyPostRequestRoles = "admin"
	APIKeyPostRequestRolesDeveloper APIKeyPostRequestRoles = "developer"
)

func (e APIKeyPostRequestRoles) ToPointer() *APIKeyPostRequestRoles {
	return &e
}

func (e *APIKeyPostRequestRoles) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "admin":
		fallthrough
	case "developer":
		*e = APIKeyPostRequestRoles(v)
		return nil
	default:
		return fmt.Errorf("invalid value for APIKeyPostRequestRoles: %v", v)
	}
}

// APIKeyPostRequestState - Initial state of the key: 'enabled', 'disabled'. If not provided the new key will be 'enabled'.
type APIKeyPostRequestState string

const (
	APIKeyPostRequestStateEnabled  APIKeyPostRequestState = "enabled"
	APIKeyPostRequestStateDisabled APIKeyPostRequestState = "disabled"
)

func (e APIKeyPostRequestState) ToPointer() *APIKeyPostRequestState {
	return &e
}

func (e *APIKeyPostRequestState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		*e = APIKeyPostRequestState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for APIKeyPostRequestState: %v", v)
	}
}

type APIKeyPostRequest struct {
	// Timestamp the key expires. If not present or is empty the key never expires. ISO-8601.
	ExpireAt *time.Time      `json:"expireAt,omitempty"`
	HashData *APIKeyHashData `json:"hashData,omitempty"`
	// Name of the key.
	Name *string `json:"name,omitempty"`
	// List of roles assigned to the key. Contains at least 1 element.
	Roles []APIKeyPostRequestRoles `json:"roles,omitempty"`
	// Initial state of the key: 'enabled', 'disabled'. If not provided the new key will be 'enabled'.
	State *APIKeyPostRequestState `json:"state,omitempty"`
}
