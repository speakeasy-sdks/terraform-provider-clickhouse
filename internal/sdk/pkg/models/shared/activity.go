// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// ActivityActorType - Type of the actor: 'user', 'support', 'system', 'api'.
type ActivityActorType string

const (
	ActivityActorTypeUser    ActivityActorType = "user"
	ActivityActorTypeSupport ActivityActorType = "support"
	ActivityActorTypeSystem  ActivityActorType = "system"
	ActivityActorTypeAPI     ActivityActorType = "api"
)

func (e ActivityActorType) ToPointer() *ActivityActorType {
	return &e
}

func (e *ActivityActorType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		fallthrough
	case "support":
		fallthrough
	case "system":
		fallthrough
	case "api":
		*e = ActivityActorType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActivityActorType: %v", v)
	}
}

// ActivityType - Type of the activity.
type ActivityType string

const (
	ActivityTypeOrganizationUpdateName         ActivityType = "organization_update_name"
	ActivityTypeOrganizationInviteCreate       ActivityType = "organization_invite_create"
	ActivityTypeOrganizationInviteDelete       ActivityType = "organization_invite_delete"
	ActivityTypeOrganizationMemberJoin         ActivityType = "organization_member_join"
	ActivityTypeOrganizationMemberAdd          ActivityType = "organization_member_add"
	ActivityTypeOrganizationMemberLeave        ActivityType = "organization_member_leave"
	ActivityTypeOrganizationMemberDelete       ActivityType = "organization_member_delete"
	ActivityTypeOrganizationMemberUpdateRole   ActivityType = "organization_member_update_role"
	ActivityTypeKeyCreate                      ActivityType = "key_create"
	ActivityTypeKeyDelete                      ActivityType = "key_delete"
	ActivityTypeServiceCreate                  ActivityType = "service_create"
	ActivityTypeServiceStart                   ActivityType = "service_start"
	ActivityTypeServiceStop                    ActivityType = "service_stop"
	ActivityTypeServiceDelete                  ActivityType = "service_delete"
	ActivityTypeServiceUpdateName              ActivityType = "service_update_name"
	ActivityTypeServiceUpdateIPAccessList      ActivityType = "service_update_ip_access_list"
	ActivityTypeServiceUpdateAutoscalingMemory ActivityType = "service_update_autoscaling_memory"
	ActivityTypeServiceUpdateAutoscalingIdling ActivityType = "service_update_autoscaling_idling"
	ActivityTypeServiceUpdatePassword          ActivityType = "service_update_password"
	ActivityTypeBackupDelete                   ActivityType = "backup_delete"
)

func (e ActivityType) ToPointer() *ActivityType {
	return &e
}

func (e *ActivityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "organization_update_name":
		fallthrough
	case "organization_invite_create":
		fallthrough
	case "organization_invite_delete":
		fallthrough
	case "organization_member_join":
		fallthrough
	case "organization_member_add":
		fallthrough
	case "organization_member_leave":
		fallthrough
	case "organization_member_delete":
		fallthrough
	case "organization_member_update_role":
		fallthrough
	case "key_create":
		fallthrough
	case "key_delete":
		fallthrough
	case "service_create":
		fallthrough
	case "service_start":
		fallthrough
	case "service_stop":
		fallthrough
	case "service_delete":
		fallthrough
	case "service_update_name":
		fallthrough
	case "service_update_ip_access_list":
		fallthrough
	case "service_update_autoscaling_memory":
		fallthrough
	case "service_update_autoscaling_idling":
		fallthrough
	case "service_update_password":
		fallthrough
	case "backup_delete":
		*e = ActivityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActivityType: %v", v)
	}
}

type Activity struct {
	// Additional information about the actor.
	ActorDetails *string `json:"actorDetails,omitempty"`
	// Unique actor ID.
	ActorID *string `json:"actorId,omitempty"`
	// IP address of the actor. Defined for 'user' and 'api' actor types.
	ActorIPAddress *string `json:"actorIpAddress,omitempty"`
	// Type of the actor: 'user', 'support', 'system', 'api'.
	ActorType *ActivityActorType `json:"actorType,omitempty"`
	// Timestamp of the activity. ISO-8601.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Unique activity ID.
	ID *string `json:"id,omitempty"`
	// Scope of the activity: organization ID this activity is related to.
	OrganizationID *string `json:"organizationId,omitempty"`
	// Scope of the activity: service ID this activity is related to.
	ServiceID *string `json:"serviceId,omitempty"`
	// Type of the activity.
	Type *ActivityType `json:"type,omitempty"`
}
