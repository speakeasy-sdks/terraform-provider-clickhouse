// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type APIKeyRoles string

const (
	APIKeyRolesAdmin     APIKeyRoles = "admin"
	APIKeyRolesDeveloper APIKeyRoles = "developer"
)

func (e APIKeyRoles) ToPointer() *APIKeyRoles {
	return &e
}

func (e *APIKeyRoles) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "admin":
		fallthrough
	case "developer":
		*e = APIKeyRoles(v)
		return nil
	default:
		return fmt.Errorf("invalid value for APIKeyRoles: %v", v)
	}
}

// APIKeyState - State of the key: 'enabled', 'disabled'.
type APIKeyState string

const (
	APIKeyStateEnabled  APIKeyState = "enabled"
	APIKeyStateDisabled APIKeyState = "disabled"
)

func (e APIKeyState) ToPointer() *APIKeyState {
	return &e
}

func (e *APIKeyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		*e = APIKeyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for APIKeyState: %v", v)
	}
}

type APIKey struct {
	// Timestamp the key was created. ISO-8601.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Timestamp the key expires. If not present or is empty the key never expires. ISO-8601.
	ExpireAt *time.Time `json:"expireAt,omitempty"`
	// Unique API key ID.
	ID *string `json:"id,omitempty"`
	// Last 4 letters of the key.
	KeySuffix *string `json:"keySuffix,omitempty"`
	// Name of the key
	Name *string `json:"name,omitempty"`
	// List of roles assigned to the key. Contains at least 1 element.
	Roles []APIKeyRoles `json:"roles,omitempty"`
	// State of the key: 'enabled', 'disabled'.
	State *APIKeyState `json:"state,omitempty"`
	// Timestamp the key was used last time. If not present the key was never used. ISO-8601.
	UsedAt *time.Time `json:"usedAt,omitempty"`
}
