// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ServicePostRequestCloudProvider - Cloud provider
type ServicePostRequestCloudProvider string

const (
	ServicePostRequestCloudProviderAws ServicePostRequestCloudProvider = "aws"
	ServicePostRequestCloudProviderGcp ServicePostRequestCloudProvider = "gcp"
)

func (e ServicePostRequestCloudProvider) ToPointer() *ServicePostRequestCloudProvider {
	return &e
}

func (e *ServicePostRequestCloudProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws":
		fallthrough
	case "gcp":
		*e = ServicePostRequestCloudProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServicePostRequestCloudProvider: %v", v)
	}
}

// ServicePostRequestRegion - Service region.
type ServicePostRequestRegion string

const (
	ServicePostRequestRegionApSouth1       ServicePostRequestRegion = "ap-south-1"
	ServicePostRequestRegionApSoutheast1   ServicePostRequestRegion = "ap-southeast-1"
	ServicePostRequestRegionEuCentral1     ServicePostRequestRegion = "eu-central-1"
	ServicePostRequestRegionEuWest1        ServicePostRequestRegion = "eu-west-1"
	ServicePostRequestRegionUsEast1        ServicePostRequestRegion = "us-east-1"
	ServicePostRequestRegionUsEast2        ServicePostRequestRegion = "us-east-2"
	ServicePostRequestRegionUsWest2        ServicePostRequestRegion = "us-west-2"
	ServicePostRequestRegionUsCentral1     ServicePostRequestRegion = "us-central1"
	ServicePostRequestRegionEuropeWest4    ServicePostRequestRegion = "europe-west4"
	ServicePostRequestRegionAsiaSoutheast1 ServicePostRequestRegion = "asia-southeast1"
)

func (e ServicePostRequestRegion) ToPointer() *ServicePostRequestRegion {
	return &e
}

func (e *ServicePostRequestRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ap-south-1":
		fallthrough
	case "ap-southeast-1":
		fallthrough
	case "eu-central-1":
		fallthrough
	case "eu-west-1":
		fallthrough
	case "us-east-1":
		fallthrough
	case "us-east-2":
		fallthrough
	case "us-west-2":
		fallthrough
	case "us-central1":
		fallthrough
	case "europe-west4":
		fallthrough
	case "asia-southeast1":
		*e = ServicePostRequestRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServicePostRequestRegion: %v", v)
	}
}

// ServicePostRequestTier - Tier of the service: 'development', 'production', 'dedicated_high_mem', 'dedicated_high_cpu', 'dedicated_standard'. Production services scale, Development are fixed size.
type ServicePostRequestTier string

const (
	ServicePostRequestTierDevelopment       ServicePostRequestTier = "development"
	ServicePostRequestTierProduction        ServicePostRequestTier = "production"
	ServicePostRequestTierDedicatedHighMem  ServicePostRequestTier = "dedicated_high_mem"
	ServicePostRequestTierDedicatedHighCPU  ServicePostRequestTier = "dedicated_high_cpu"
	ServicePostRequestTierDedicatedStandard ServicePostRequestTier = "dedicated_standard"
)

func (e ServicePostRequestTier) ToPointer() *ServicePostRequestTier {
	return &e
}

func (e *ServicePostRequestTier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "development":
		fallthrough
	case "production":
		fallthrough
	case "dedicated_high_mem":
		fallthrough
	case "dedicated_high_cpu":
		fallthrough
	case "dedicated_standard":
		*e = ServicePostRequestTier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServicePostRequestTier: %v", v)
	}
}

type ServicePostRequest struct {
	// Optional backup ID used as an initial state for the new service. When used the region and the tier of the new instance must be the same as the values of the original instance.
	BackupID *string `json:"backupId,omitempty"`
	// Cloud provider
	CloudProvider *ServicePostRequestCloudProvider `json:"provider,omitempty"`
	// When set to true the service is allowed to scale down to zero when idle. Always true for development services.
	IdleScaling *bool `json:"idleScaling,omitempty"`
	// Set minimum idling timeout (in minutes). Must be &gt;= 5 minutes.
	IdleTimeoutMinutes *float64 `json:"idleTimeoutMinutes,omitempty"`
	// List of IP addresses allowed to access the service
	IPAccessList []IPAccessListEntry `json:"ipAccessList,omitempty"`
	// Maximum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and lower than 360 for non paid services or 720 for paid services.
	MaxTotalMemoryGb *float64 `json:"maxTotalMemoryGb,omitempty"`
	// Minimum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and greater than 24.
	MinTotalMemoryGb *float64 `json:"minTotalMemoryGb,omitempty"`
	// Name of the service.
	Name *string `json:"name,omitempty"`
	// Service region.
	Region *ServicePostRequestRegion `json:"region,omitempty"`
	// Tier of the service: 'development', 'production', 'dedicated_high_mem', 'dedicated_high_cpu', 'dedicated_standard'. Production services scale, Development are fixed size.
	Tier *ServicePostRequestTier `json:"tier,omitempty"`
}
