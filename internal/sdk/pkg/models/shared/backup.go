// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// BackupStatus - Status of the backup: 'done', 'error', 'in_progress'.
type BackupStatus string

const (
	BackupStatusDone       BackupStatus = "done"
	BackupStatusError      BackupStatus = "error"
	BackupStatusInProgress BackupStatus = "in_progress"
)

func (e BackupStatus) ToPointer() *BackupStatus {
	return &e
}

func (e *BackupStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "done":
		fallthrough
	case "error":
		fallthrough
	case "in_progress":
		*e = BackupStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BackupStatus: %v", v)
	}
}

type Backup struct {
	// Backup finish timestamp. ISO-8601. Available only for finished backups
	FinishedAt *time.Time `json:"finishedAt,omitempty"`
	// Unique backup ID.
	ID *string `json:"id,omitempty"`
	// Name
	ServiceID *string `json:"serviceId,omitempty"`
	// Backup start timestamp. ISO-8601.
	StartedAt *time.Time `json:"startedAt,omitempty"`
	// Status of the backup: 'done', 'error', 'in_progress'.
	Status *BackupStatus `json:"status,omitempty"`
}
