// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type APIKeyPatchRequestRoles string

const (
	APIKeyPatchRequestRolesAdmin     APIKeyPatchRequestRoles = "admin"
	APIKeyPatchRequestRolesDeveloper APIKeyPatchRequestRoles = "developer"
)

func (e APIKeyPatchRequestRoles) ToPointer() *APIKeyPatchRequestRoles {
	return &e
}

func (e *APIKeyPatchRequestRoles) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "admin":
		fallthrough
	case "developer":
		*e = APIKeyPatchRequestRoles(v)
		return nil
	default:
		return fmt.Errorf("invalid value for APIKeyPatchRequestRoles: %v", v)
	}
}

// APIKeyPatchRequestState - State of the key: 'enabled', 'disabled'.
type APIKeyPatchRequestState string

const (
	APIKeyPatchRequestStateEnabled  APIKeyPatchRequestState = "enabled"
	APIKeyPatchRequestStateDisabled APIKeyPatchRequestState = "disabled"
)

func (e APIKeyPatchRequestState) ToPointer() *APIKeyPatchRequestState {
	return &e
}

func (e *APIKeyPatchRequestState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		*e = APIKeyPatchRequestState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for APIKeyPatchRequestState: %v", v)
	}
}

type APIKeyPatchRequest struct {
	// Timestamp the key expires. If not present or is empty the key never expires. ISO-8601.
	ExpireAt *time.Time `json:"expireAt,omitempty"`
	// Name of the key
	Name *string `json:"name,omitempty"`
	// List of roles assigned to the key. Contains at least 1 element.
	Roles []APIKeyPatchRequestRoles `json:"roles,omitempty"`
	// State of the key: 'enabled', 'disabled'.
	State *APIKeyPatchRequestState `json:"state,omitempty"`
}
