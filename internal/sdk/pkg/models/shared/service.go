// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// ServiceCloudProvider - Cloud provider
type ServiceCloudProvider string

const (
	ServiceCloudProviderAws ServiceCloudProvider = "aws"
	ServiceCloudProviderGcp ServiceCloudProvider = "gcp"
)

func (e ServiceCloudProvider) ToPointer() *ServiceCloudProvider {
	return &e
}

func (e *ServiceCloudProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws":
		fallthrough
	case "gcp":
		*e = ServiceCloudProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceCloudProvider: %v", v)
	}
}

// ServiceRegion - Service region.
type ServiceRegion string

const (
	ServiceRegionApSouth1       ServiceRegion = "ap-south-1"
	ServiceRegionApSoutheast1   ServiceRegion = "ap-southeast-1"
	ServiceRegionEuCentral1     ServiceRegion = "eu-central-1"
	ServiceRegionEuWest1        ServiceRegion = "eu-west-1"
	ServiceRegionUsEast1        ServiceRegion = "us-east-1"
	ServiceRegionUsEast2        ServiceRegion = "us-east-2"
	ServiceRegionUsWest2        ServiceRegion = "us-west-2"
	ServiceRegionUsCentral1     ServiceRegion = "us-central1"
	ServiceRegionEuropeWest4    ServiceRegion = "europe-west4"
	ServiceRegionAsiaSoutheast1 ServiceRegion = "asia-southeast1"
)

func (e ServiceRegion) ToPointer() *ServiceRegion {
	return &e
}

func (e *ServiceRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ap-south-1":
		fallthrough
	case "ap-southeast-1":
		fallthrough
	case "eu-central-1":
		fallthrough
	case "eu-west-1":
		fallthrough
	case "us-east-1":
		fallthrough
	case "us-east-2":
		fallthrough
	case "us-west-2":
		fallthrough
	case "us-central1":
		fallthrough
	case "europe-west4":
		fallthrough
	case "asia-southeast1":
		*e = ServiceRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceRegion: %v", v)
	}
}

// ServiceState - Current state of the service.
type ServiceState string

const (
	ServiceStateStarting     ServiceState = "starting"
	ServiceStateStopping     ServiceState = "stopping"
	ServiceStateTerminating  ServiceState = "terminating"
	ServiceStateProvisioning ServiceState = "provisioning"
	ServiceStateRunning      ServiceState = "running"
	ServiceStateStopped      ServiceState = "stopped"
	ServiceStateTerminated   ServiceState = "terminated"
	ServiceStateDegraded     ServiceState = "degraded"
	ServiceStateFailed       ServiceState = "failed"
	ServiceStateIdle         ServiceState = "idle"
)

func (e ServiceState) ToPointer() *ServiceState {
	return &e
}

func (e *ServiceState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "starting":
		fallthrough
	case "stopping":
		fallthrough
	case "terminating":
		fallthrough
	case "provisioning":
		fallthrough
	case "running":
		fallthrough
	case "stopped":
		fallthrough
	case "terminated":
		fallthrough
	case "degraded":
		fallthrough
	case "failed":
		fallthrough
	case "idle":
		*e = ServiceState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceState: %v", v)
	}
}

// ServiceTier - Tier of the service: 'development', 'production', 'dedicated_high_mem', 'dedicated_high_cpu', 'dedicated_standard'. Production services scale, Development are fixed size.
type ServiceTier string

const (
	ServiceTierDevelopment       ServiceTier = "development"
	ServiceTierProduction        ServiceTier = "production"
	ServiceTierDedicatedHighMem  ServiceTier = "dedicated_high_mem"
	ServiceTierDedicatedHighCPU  ServiceTier = "dedicated_high_cpu"
	ServiceTierDedicatedStandard ServiceTier = "dedicated_standard"
)

func (e ServiceTier) ToPointer() *ServiceTier {
	return &e
}

func (e *ServiceTier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "development":
		fallthrough
	case "production":
		fallthrough
	case "dedicated_high_mem":
		fallthrough
	case "dedicated_high_cpu":
		fallthrough
	case "dedicated_standard":
		*e = ServiceTier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceTier: %v", v)
	}
}

type Service struct {
	// Cloud provider
	CloudProvider *ServiceCloudProvider `json:"provider,omitempty"`
	// Service creation timestamp. ISO-8601.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// List of all service endpoints.
	Endpoints []ServiceEndpoint `json:"endpoints,omitempty"`
	// Unique service ID.
	ID *string `json:"id,omitempty"`
	// When set to true the service is allowed to scale down to zero when idle. Always true for development services.
	IdleScaling *bool `json:"idleScaling,omitempty"`
	// Set minimum idling timeout (in minutes). Must be &gt;= 5 minutes.
	IdleTimeoutMinutes *float64 `json:"idleTimeoutMinutes,omitempty"`
	// List of IP addresses allowed to access the service
	IPAccessList []IPAccessListEntry `json:"ipAccessList,omitempty"`
	// Maximum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and lower than 360 for non paid services or 720 for paid services.
	MaxTotalMemoryGb *float64 `json:"maxTotalMemoryGb,omitempty"`
	// Minimum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and greater than 24.
	MinTotalMemoryGb *float64 `json:"minTotalMemoryGb,omitempty"`
	// Name of the service.
	Name *string `json:"name,omitempty"`
	// Service region.
	Region *ServiceRegion `json:"region,omitempty"`
	// Current state of the service.
	State *ServiceState `json:"state,omitempty"`
	// Tier of the service: 'development', 'production', 'dedicated_high_mem', 'dedicated_high_cpu', 'dedicated_standard'. Production services scale, Development are fixed size.
	Tier *ServiceTier `json:"tier,omitempty"`
}
